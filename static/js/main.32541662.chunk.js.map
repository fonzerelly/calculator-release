{"version":3,"sources":["calculator-model/index.js","calculator-context/index.js","display/index.js","numkey/index.js","numpad/index.js","operatorkey/index.js","evaluatekey/index.js","App.js","serviceWorker.js","index.js"],"names":["createDefaultModel","display","inputCache","clone","model","setDisplay","displayValue","clonedModel","String","appendDisplay","match","cacheOperation","operation","evaluate","eval","getDisplay","updateContext","context","fn","value","getter","setter","CalculatorContext","createContext","CalculatorProvider","props","useState","setModel","Provider","children","Display","useContext","className","Numkey","label","onClick","Numpad","n","orderedKeys","Array","map","_","index","slice","reverse","concat","digit","key","Opkey","Evalkey","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.32541662.chunk.js","sourcesContent":["export function createDefaultModel() {\n    return {\n        display: \"0\",\n        inputCache: \"\"\n    }\n}\n\nconst clone = (model) => {\n    return {...model}\n}\n\n// const clone = (model) => model\nexport function setDisplay(model, displayValue) {\n    let clonedModel = clone(model)\n    clonedModel.display = String(displayValue);\n    return clonedModel;\n}\n\nexport function appendDisplay(model, displayValue) {\n    let clonedModel = clone(model)\n    if (clonedModel.display.match(/^0+$/)) {\n        return setDisplay(model, displayValue)\n    }\n    if (displayValue === '.' && clonedModel.display.match(/\\./)) {\n        return clonedModel\n    }\n    return setDisplay(model, model.display + String(displayValue))\n}\n\nexport function cacheOperation(model, operation) {\n    let clonedModel = clone(model)\n    clonedModel.inputCache += clonedModel.display + operation\n    clonedModel.display = \"0\"\n    return clonedModel\n}\n\nexport function evaluate(model) {\n    let clonedModel = clone(model)\n    clonedModel.inputCache += clonedModel.display\n    clonedModel.display = String(eval(clonedModel.inputCache))\n    clonedModel.inputCache = \"\"\n\n    return clonedModel\n}\n\nexport function getDisplay(model) {\n    return model.display\n}\n\nexport function updateContext(context, fn, value) {\n    const [getter, setter] = context;\n    return setter(fn(getter, value))\n}","import React, {createContext, useState} from 'react'\nimport {createDefaultModel} from '../calculator-model'\n\nexport const CalculatorContext = createContext()\n\nexport function CalculatorProvider (props) {\n    const [model, setModel] = useState(createDefaultModel())\n\n    return (\n        <CalculatorContext.Provider value={[model, setModel]}>\n            {props.children}\n        </CalculatorContext.Provider>\n    )\n}\n","import React, { useContext } from 'react'\nimport {CalculatorContext} from '../calculator-context'\nimport {getDisplay} from '../calculator-model'\n\nexport default function Display() {\n    const [model,_] = useContext(CalculatorContext)\n    return (\n        <div className=\"display\">\n          <p className=\"display__value\">{getDisplay(model)}</p>\n        </div>\n    )\n}","import React, {useContext} from 'react'\nimport {CalculatorContext} from '../calculator-context'\nimport {appendDisplay, updateContext, createDefaultModel} from '../calculator-model'\nexport default function Numkey({label}) {\n    const context = useContext(CalculatorContext)\n    const updateDisplay = () => {\n        if (label === 'ce') {\n            return updateContext(context, createDefaultModel)\n        }\n        updateContext(context, appendDisplay, label)\n    }\n    return ( \n        <div onClick={updateDisplay} className=\"keypad__key--number\">\n            <p className=\"keypad__key__value\">{label}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport Numkey from '../numkey'\n\nfunction range(n) {\n    return [...new Array(n)].map((_, index) => {\n        return index;\n    })\n}\n\nexport default function Numpad () {\n    const orderedKeys = range(10)\n        .slice(1)\n        .reverse()\n        .concat(['.', '0', 'ce'])\n    return (\n        <div className=\"keypad__number\">\n            {orderedKeys.map((digit, index) => {\n                return (\n                    <Numkey label={digit}  key={index}/>\n                )\n            })}\n        </div>\n    )\n}","import React, {useContext} from 'react'\nimport { CalculatorContext } from '../calculator-context'\nimport { updateContext, cacheOperation } from '../calculator-model'\n\nexport default function Opkey ({label}) {\n    const context = useContext(CalculatorContext)\n    const updateDisplay = () => {\n        updateContext(context, cacheOperation, label)\n    }\n    return (\n        <div className=\"keypad__key--operator\" onClick={updateDisplay}>\n            <p className=\"keypad__key__value\">{label}</p>\n        </div>\n    )\n}","import React, {useContext} from 'react'\nimport { updateContext, evaluate } from '../calculator-model'\nimport { CalculatorContext } from '../calculator-context'\n\nexport default function Evalkey () {\n    const context = useContext(CalculatorContext)\n    const updateDisplay = () => {\n        updateContext(context, evaluate)\n    }\n\n    return (\n        <div className=\"keypad__submit\" onClick={updateDisplay}>\n            <div  className=\"keypad__key--submit\">\n                <p className=\"keypad__key__value\">=</p>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\n\nimport {CalculatorProvider} from './calculator-context'\nimport Display from './display'\nimport Numpad from './numpad'\nimport Opkey from './operatorkey'\nimport Evalkey from './evaluatekey'\n\nfunction App() {\n  return (\n    <CalculatorProvider>\n    <div className=\"app\">\n      <div className=\"calculator\">\n        <Display/>\n        <div className=\"keypad\">\n          <Numpad/>\n          <div className=\"keypad__operator\">\n            <Opkey label=\"/\"/>\n            <Opkey label=\"*\"/>\n            <Opkey label=\"+\"/>\n            <Opkey label=\"-\"/>\n          </div>\n          <Evalkey/>\n        </div>\n      </div>\n    </div>\n    </CalculatorProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* istanbul ignore file */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* istanbul ignore file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}